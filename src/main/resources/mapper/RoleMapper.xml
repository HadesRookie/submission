<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.graduation.submission.dao.RoleMapper">
    <resultMap id="roleMap" type="com.graduation.submission.pojo.Role">
        <result column="id" property="id" javaType="java.lang.Integer" />
        <result column="role_name" property="roleName" javaType="java.lang.String" />
        <result column="code" property="code" javaType="java.lang.String" />
        <result column="description" property="description" javaType="java.lang.String" />
        <result column="insert_time" property="insertTime" javaType="java.util.Date" />
        <result column="update_time" property="updateTime" javaType="java.util.Date" />
    </resultMap>

    <select id="getRolesByUserId" resultMap="roleMap">
        select r.id,r.role_name,r.code,r.description,r.insert_time,r.update_time
        from role r
             left join user_role ur on(r.id = ur.role_id)
        where ur.user_id = #{id}
    </select>

    <sql id="Base_Column_List" >
        id, role_name,code,description, insert_time, update_time
    </sql>
    <select id="selectByPrimaryKey" resultMap="roleMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from role
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from role
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insertSelective" parameterType="com.graduation.submission.pojo.Role" >
        insert into role
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="roleName != null" >
                role_name,
            </if>
            <if test="code != null" >
                code,
            </if>
            <if test="description != null" >
                description,
            </if>
            <if test="insertTime != null" >
                insert_time,
            </if>
            <if test="updateTime != null" >
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="roleName != null" >
                #{roleName,jdbcType=VARCHAR},
            </if>
            <if test="code != null" >
                #{code,jdbcType=VARCHAR},
            </if>
            <if test="description != null" >
                #{description,jdbcType=VARCHAR},
            </if>
            <if test="insertTime != null" >
                #{insertTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null" >
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.graduation.submission.pojo.Role" >
        update role
        <set >
            <if test="roleName != null" >
                role_name = #{roleName,jdbcType=VARCHAR},
            </if>
            <if test="code != null" >
                code = #{code,jdbcType=VARCHAR},
            </if>
            <if test="description != null" >
                description = #{description,jdbcType=VARCHAR},
            </if>
            <if test="insertTime != null" >
                insert_time = #{insertTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null" >
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.graduation.submission.pojo.Role" >
        update role
        set role_name = #{roleName,jdbcType=VARCHAR},
            code = #{code,jdbcType=VARCHAR},
            description = #{description,jdbcType=VARCHAR},
            insert_time = #{insertTime,jdbcType=TIMESTAMP},
            update_time = #{updateTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>


    <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.graduation.submission.pojo.Role" >
        insert into role (id, role_name,code, descritpion,
                          insert_time,update_time)
        values (#{id,jdbcType=INTEGER}, #{roleName,jdbcType=VARCHAR},#{code,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR},
                #{insertTime,jdbcType=TIMESTAMP},#{updateTime,jdbcType=TIMESTAMP})
    </insert>
    <!--=Start findList 分页查询角色列表-->
    <select id="findList" resultMap="roleMap">
        select
        <include refid="Base_Column_List" />
        from role
    </select>
    <!--=End findList 分页查询角色列表-->

    <!--=Start findRoleAndPerms 查询角色列表-->
    <resultMap id="rolePerms" type="com.graduation.submission.pojo.vo.RoleVO" >
        <id column="id" property="id" />
        <result column="role_name" property="roleName"/>
        <result column="code" property="code"/>
        <result column="description" property="description"/>
        <result column="insert_time" property="insertTime"/>
        <collection property="rolePermissions" ofType="com.graduation.submission.pojo.RolePermission">
            <result  column="role_id" property="roleId"/>
            <result column="permit_id" property="permitId"/>
        </collection>
    </resultMap>

    <select id="findRoleAndPerms" resultMap="rolePerms">
        select
            r.*,rp.role_id,rp.permit_id
        from role r
                 INNER JOIN role_permission rp ON r.id=rp.role_id
        WHERE r.id=#{id}
    </select>
    <!--=End findRoleAndPerms 查询角色列表-->

    <!--=Start getRoleByUserId 根据用户id查询角色数据-->
    <!--<select id="getRoleByUserId" resultType="Role">-->
        <!--select-->
            <!--ur.role_id id,r.role_name-->
        <!--from user_role ur-->
                 <!--INNER JOIN role r ON r.id=ur.role_id-->
        <!--WHERE ur.user_id=#{userId}-->
    <!--</select>-->
    <!--=End getRoleByUserId 根据用户id查询角色数据-->

    <!--=Start getRoles 查询角色列表-->
    <select id="getRoles" resultMap="roleMap">
        select
        <include refid="Base_Column_List" />
        from role
    </select>
    <!--=End getRoles 查询角色列表-->

    <select id="getRoleByUserId" resultType="com.graduation.submission.pojo.Role">
        select
            ur.role_id id,r.role_name,r.code
        from user_role ur
                 INNER JOIN role r ON r.id=ur.role_id
        WHERE ur.user_id=#{userId}
    </select>

</mapper>